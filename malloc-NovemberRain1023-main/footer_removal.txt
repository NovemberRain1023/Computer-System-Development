/**
 * @file mm.c
 * @brief A 64-bit struct-based implicit free list memory allocator
 *
 * 15-213: Introduction to Computer Systems
 *
 * TODO: insert your documentation here. :)
 *
 *************************************************************************
 *
 * ADVICE FOR STUDENTS.
 * - Step 0: Please read the writeup!
 * - Step 1: Write your heap checker.
 * - Step 2: Write contracts / debugging assert statements.
 * - Good luck, and have fun!
 *
 *************************************************************************
 *
 * @author Xupeng Shi <xupengs@andrew.cmu.edu>
 */

#include <assert.h>
#include <inttypes.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "memlib.h"
#include "mm.h"

/* Do not change the following! */

#ifdef DRIVER
/* create aliases for driver tests */
#define malloc mm_malloc
#define free mm_free
#define realloc mm_realloc
#define calloc mm_calloc
#define memset mem_memset
#define memcpy mem_memcpy
#endif /* def DRIVER */

/* You can change anything from here onward */

/*
 *****************************************************************************
 * If DEBUG is defined (such as when running mdriver-dbg), these macros      *
 * are enabled. You can use them to print debugging output and to check      *
 * contracts only in debug mode.                                             *
 *                                                                           *
 * Only debugging macros with names beginning "dbg_" are allowed.            *
 * You may not define any other macros having arguments.                     *
 *****************************************************************************
 */
#ifdef DEBUG
/* When DEBUG is defined, these form aliases to useful functions */
#define dbg_printf(...) printf(__VA_ARGS__)
#define dbg_requires(expr) assert(expr)
#define dbg_assert(expr) assert(expr)
#define dbg_ensures(expr) assert(expr)
#define dbg_printheap(...) print_heap(__VA_ARGS__)
#else
/* When DEBUG is not defined, no code gets generated for these */
/* The sizeof() hack is used to avoid "unused variable" warnings */
#define dbg_printf(...) (sizeof(__VA_ARGS__), -1)
#define dbg_requires(expr) (sizeof(expr), 1)
#define dbg_assert(expr) (sizeof(expr), 1)
#define dbg_ensures(expr) (sizeof(expr), 1)
#define dbg_printheap(...) ((void)sizeof(__VA_ARGS__))
#endif

/* Basic constants */

typedef uint64_t word_t;

/** @brief Word and header size (bytes) */
static const size_t wsize = sizeof(word_t);

/** @brief Double word size (bytes) */
static const size_t dsize = 2 * wsize;

/** @brief Minimum block size (bytes) */
static const size_t min_block_size = 2 * dsize;

/**
 * extend heap size
 *
 */
static const size_t chunksize = (1 << 12);

/**
 * To get a block whether it's allocated
 */
static const word_t alloc_mask = 0x1;

/**
 * To get previous block whether it's allocated
 */
static const word_t pre_alloc_mask = 0x2;

/**
 * get the current block whether it;s allocated
 */
static const word_t size_mask = ~(word_t)0xF;

/** @brief Represents the header and payload of one block in the heap */
typedef struct block {
    // union to store more memory
    /** @brief Header contains size + allocation flag */
    word_t header;
    union {
        struct {
            struct block *next;
            struct block *prev;
        };
        char payload[0];
        /* data */
    };

    /**
     * @brief A pointer to the block payload.
     *
     * TODO: feel free to delete this comment once you've read it carefully.
     * We don't know what the size of the payload will be, so we will declare
     * it as a zero-length array, which is a GCC compiler extension. This will
     * allow us to obtain a pointer to the start of the payload.
     *
     * WARNING: A zero-length array must be the last element in a struct, so
     * there should not be any struct fields after it. For this lab, we will
     * allow you to include a zero-length array in a union, as long as the
     * union is the last field in its containing struct. However, this is
     * compiler-specific behavior and should be avoided in general.
     *
     * WARNING: DO NOT cast this pointer to/from other types! Instead, you
     * should use a union to alias this zero-length array with another struct,
     * in order to store additional types of data in the payload memory.
     */

    /*
     * TODO: delete or replace this comment once you've thought about it.
     * Why can't we declare the block footer here as part of the struct?
     * Why do we even have footers -- will the code work fine without them?
     * which functions actually use the data contained in footers?
     */

} block_t;

/* Global variables */

/** @brief Pointer to first block in the heap */
static block_t *heap_start = NULL;

/** @brief Pointer to first free_block in explicit list in the heap */
static block_t *free_list = NULL;

/** @brief Pointers to first free_block in segregated list in the heap */
static block_t *seg_free_list[9] = {NULL};

//#define payload    pointers_and_payload_t.payload
/*
 *****************************************************************************
 * The functions below are short wrapper functions to perform                *
 * bit manipulation, pointer arithmetic, and other helper operations.        *
 *                                                                           *
 * We've given you the function header comments for the functions below      *
 * to help you understand how this baseline code works.                      *
 *                                                                           *
 * Note that these function header comments are short since the functions    *
 * they are describing are short as well; you will need to provide           *
 * adequate details for the functions that you write yourself!               *
 *****************************************************************************
 */

/*
 * ---------------------------------------------------------------------------
 *                        BEGIN SHORT HELPER FUNCTIONS
 * ---------------------------------------------------------------------------
 */

/**
 * @brief Returns the maximum of two integers.
 * @param[in] x
 * @param[in] y
 * @return `x` if `x > y`, and `y` otherwise.
 */
static size_t max(size_t x, size_t y) {
    return (x > y) ? x : y;
}

/**
 * @brief Rounds `size` up to next multiple of n
 * @param[in] size
 * @param[in] n
 * @return The size after rounding up
 */
static size_t round_up(size_t size, size_t n) {
    return n * ((size + (n - 1)) / n);
}

/**
 * @brief Packs the `size` and `alloc` of a block into a word suitable for
 *        use as a packed value.
 *
 * Packed values are used for both headers and footers.
 *
 * The allocation status is packed into the lowest bit of the word.
 *
 * @param[in] size The size of the block being represented
 * @param[in] alloc True if the block is allocated
 * @return The packed value
 */
static word_t pack(size_t size, bool alloc, bool pre_alloc) {
    word_t word = size;
    if (alloc) {
        word |= alloc_mask;
    }
    if (pre_alloc) {
        word |= (0x2);
    }
    return word;
}

/**
 * @brief Extracts the size represented in a packed word.
 *
 * This function simply clears the lowest 4 bits of the word, as the heap
 * is 16-byte aligned.
 *
 * @param[in] word
 * @return The size of the block represented by the word
 */
static size_t extract_size(word_t word) {
    // dbg_printf("Try to extract_size with word %ld\n", word);
    return (word & size_mask);
}

/**
 * @brief Extracts the size of a block from its header.
 * @param[in] block
 * @return The size of the block
 */
static size_t get_size(block_t *block) {
    // dbg_printf("Try to get_size with block %p, header is %ld\n", block,
    // block->header);
    return extract_size(block->header);
}

static bool print_free_list() {
    block_t *block = NULL;

    for (int i = 0; i < 9; i++) {
        for (block = seg_free_list[i]; block != NULL; block = block->next) {
            dbg_printf("list number : %d 's element is %ld\n", i,
                       get_size(block));
            dbg_printf("prev is %p, next is %p", block->prev, block->next);
            if (block->next != NULL) {
                if (block->next->prev != block) {
                    return false;
                }
            }
        }
    }
    return true;
}

static bool print_heap() {
    // block_t *block = NULL;
    // for (block = heap_start; block != NULL; block = block->next) {
    //     if (block->next != NULL) {
    //         if (block->next->prev != block) {
    //             return false;
    //         }
    //     }
    // }
    return true;
}

/**
 * @brief Given a payload pointer, returns a pointer to the corresponding
 *        block.
 * @param[in] bp A pointer to a block's payload
 * @return The corresponding block
 */
static block_t *payload_to_header(void *bp) {
    return (block_t *)((char *)bp - offsetof(block_t, payload));
}

/**
 * @brief Given a block pointer, returns a pointer to the corresponding
 *        payload.
 * @param[in] block
 * @return A pointer to the block's payload
 * @pre The block must be a valid block, not a boundary tag.
 */
static void *header_to_payload(block_t *block) {
    dbg_requires(get_size(block) != 0);
    return (void *)(block->payload);
}

/**
 * @brief Given a block pointer, returns a pointer to the corresponding
 *        footer.
 * @param[in] block
 * @return A pointer to the block's footer
 * @pre The block must be a valid block, not a boundary tag.
 */
static word_t *header_to_footer(block_t *block) {
    dbg_requires(get_size(block) != 0 &&
                 "Called header_to_footer on the epilogue block");
    return (word_t *)(block->payload + get_size(block) - dsize);
}

/**
 * @brief Given a block footer, returns a pointer to the corresponding
 *        header.
 * @param[in] footer A pointer to the block's footer
 * @return A pointer to the start of the block
 * @pre The footer must be the footer of a valid block, not a boundary tag.
 */
static block_t *footer_to_header(word_t *footer) {
    size_t size = extract_size(*footer);
    dbg_assert(size != 0 && "Called footer_to_header on the prologue block");
    return (block_t *)((char *)footer + wsize - size);
}

/**
 * @brief Returns the payload size of a given block.
 *
 * The payload size is equal to the entire block size minus the sizes of the
 * block's header and footer.
 *
 * @param[in] block
 * @return The size of the block's payload
 */
static size_t get_payload_size(block_t *block) {
    size_t asize = get_size(block);
    return asize - wsize;
}

/**
 * @brief Returns the allocation status of a given header value.
 *
 * This is based on the lowest bit of the header value.
 *
 * @param[in] word
 * @return The allocation status correpsonding to the word
 */
static bool extract_alloc(word_t word) {
    return (bool)(word & alloc_mask);
}

/**
 * @brief Returns the allocation status of a given header value.
 *
 * This is based on the lowest bit of the header value.
 *
 * @param[in] word
 * @return The allocation status correpsonding to the word
 */
static bool extract_prev_alloc(word_t word) {
    return (bool)(word & pre_alloc_mask);
}

/**
 * @brief Returns the allocation status of a block, based on its header.
 * @param[in] block
 * @return The allocation status of the block
 */
static bool get_alloc(block_t *block) {
    if (block == NULL) {
        return true;
    }
    return extract_alloc(block->header);
}

/**
 * @brief Returns the allocation status of previous block, based on its header.
 * @param[in] block
 * @return The allocation status of the previous block
 */
static bool get_prev_alloc(block_t *block) {
    if (block == NULL) {
        return true;
    }
    return extract_prev_alloc(block->header);
}

/**
 * @brief Writes an epilogue header at the given address.
 *
 * The epilogue header has size 0, and is marked as allocated.
 *
 * @param[out] block The location to write the epilogue header
 */
static void write_epilogue(block_t *block) {
    dbg_requires(block != NULL);
    dbg_requires((char *)block == mem_heap_hi() - 7);
    block->header = pack(0, true, false);
}

/**
 * @brief Writes next header's previous allocation status.
 *
 * The epilogue header has size 0, and is marked as allocated.
 *
 * @param[out] block The location to write the epilogue header
 */
static void write_next_alloc(block_t *block, bool prev_alloc) {
    dbg_printf("Current previous alloc_status is %d\n", (block->header && 0x2));
    if (prev_alloc) {
        block->header |= 0x2;
    } else {
        dbg_printf("set the next block's prev_alloc_status to zero\n");
        block->header &= ~(0x2);
        dbg_printf("after setting, the header is %ld, the status is %ld\n",
                   block->header, block->header & 0x2);
    }
    dbg_printf("We have written next block's prev_alloc_status to %ld\n",
               (block->header & 0x2));
}

/**
 * @brief Finds the next consecutive block on the heap.
 *
 * This function accesses the next block in the "implicit list" of the heap
 * by adding the size of the block.
 *
 * @param[in] block A block in the heap
 * @return The next consecutive block on the heap
 * @pre The block is not the epilogue
 */
static block_t *find_next(block_t *block) {
    dbg_printf("find_next begins\n");
    dbg_requires(block != NULL);
    if (extract_size(block->header) == 0) {
        return NULL;
    }
    dbg_printf("find_next current block's size is %ld and we go into return\n",
               extract_size(block->header));
    // dbg_requires(get_size(block) != 0 &&
    //              "Called find_next on the last block in the heap");
    return (block_t *)((char *)block + get_size(block));
}

/**
 * @brief Writes a block starting at the given address.`
 *
 * This function writes both a header and footer, where the location of the
 * footer is computed in relation to the header.
 *
 * TODO: Are there any preconditions or postconditions?
 *
 * @param[out] block The location to begin writing the block header
 * @param[in] size The size of the new block
 * @param[in] alloc The allocation status of the new block
 */
static void write_block(block_t *block, size_t size, bool alloc) {
    dbg_requires(block != NULL);
    dbg_requires(size > 0);
    bool prev_alloc = get_prev_alloc(block);
    dbg_printf("When write, current block's header is %ld, previous "
               "allocated_status is %d\n",
               block->header, prev_alloc);
    block->header = pack(size, alloc, prev_alloc);
    block_t *next = find_next(block);
    // dbg_printf("next block's size is %ld\n", get_size(next));
    if (next != NULL) {
        write_next_alloc(next, alloc);
        // dbg_printf("write next alloc status %d\n", alloc);
    }

    if (!alloc) {
        word_t *footerp = header_to_footer(block);
        // dbg_printf("%p, %ld, %d\n", block, size, alloc);
        *footerp = pack(size, alloc, prev_alloc);
    }
    dbg_printf("after write, next block's size is %ld, next block's "
               "prev_allocated_status is %d\n",
               get_size(next), get_prev_alloc(next));
}

/**
 * @brief Finds the footer of the previous block on the heap.
 * @param[in] block A block in the heap
 * @return The location of the previous block's footer
 */
static word_t *find_prev_footer(block_t *block) {
    // Compute previous footer position as one word before the header
    return &(block->header) - 1;
}

/**
 * @brief Finds the previous consecutive block on the heap.
 *
 * This is the previous block in the "implicit list" of the heap.
 *
 * If the function is called on the first block in the heap, NULL will be
 * returned, since the first block in the heap has no previous block!
 *
 * The position of the previous block is found by reading the previous
 * block's footer to determine its size, then calculating the start of the
 * previous block based on its size.
 *
 * @param[in] block A block in the heap
 * @return The previous consecutive block in the heap.
 */
static block_t *find_prev(block_t *block) {
    dbg_requires(block != NULL);
    word_t *footerp = find_prev_footer(block);

    // Return NULL if called on first block in the heap
    if (extract_size(*footerp) == 0) {
        return NULL;
    }

    return footer_to_header(footerp);
}

static size_t get_index(size_t input) {
    int index = 0;
    if (input > 8192) {
        return 8;
    }
    input /= 64;
    while (input > 0) {
        input /= 2;
        index++;
    }
    return index;
}

static void insert_block(block_t *block) {
    dbg_printf("We insert a block in 422 with size %ld\n", get_size(block));
    dbg_printf("Before insert\n");
    print_free_list();

    size_t index = get_index(get_size(block));

    block->next = seg_free_list[index];
    if (seg_free_list[index] != NULL) {
        seg_free_list[index]->prev = block;
    }
    seg_free_list[index] = block;
    seg_free_list[index]->prev = NULL;

    // block->next = free_list;
    // if (free_list != NULL) {
    //     free_list->prev = block;
    // }
    // free_list = block;
    // free_list->prev = NULL;
    dbg_printf("After insert\n");
    dbg_printf("The seg_free_list[0] is %p\n", seg_free_list[0]);
    print_free_list();
}

static void delete_block(block_t *block) {

    size_t index = get_index(get_size(block));
    if (block == seg_free_list[index]) {
        seg_free_list[index] = seg_free_list[index]->next;
        dbg_printf("We delete the first node of a free list\n");
    }

    dbg_printf("Before delete\n");
    print_free_list();
    if (block->next == NULL && block->prev == NULL) {
        seg_free_list[index] = NULL;
        return;
        dbg_printf("delete case 1\n");
    }
    if (block->next != NULL) {
        block->next->prev = block->prev;
        dbg_printf("delete case 2\n");
        dbg_printf("block_prev %p", block->prev);
    }
    if (block->prev != NULL) {
        dbg_printf("delete case 3\n");
        dbg_printf("block->prev is %p, size is %ld, block->next is %p\n",
                   block->prev, get_size(block->prev), block->next);

        block->prev->next = block->next;
    }
    dbg_printf("After delete\n");
    print_free_list();
}

/*
 * ---------------------------------------------------------------------------
 *                        END SHORT HELPER FUNCTIONS
 * ---------------------------------------------------------------------------
 */

/******** The remaining content below are helper and debug routines ********/
/**
 * @brief
 *
 * coalesce_block function is used to join the free block together when free a
 * block to increase the throughput of the heap. <What is the function's return
 * value?> <Are there any preconditions or postconditions?>
 *
 * @param[in] block The block that may be needed to coalesce.
 * @return
 */
static block_t *coalesce_block(block_t *block) {

    dbg_printf("coalesce_block begins");
    bool prev_alloc = true;
    block_t *prev = NULL;
    block_t *next = find_next(block);

    if (get_prev_alloc(block) == 0) {
        prev = find_prev(block);
        prev_alloc = false;
    }

    if (prev_alloc && get_alloc(next)) {
        dbg_printf("Do nothing with coalesce_block here");
        return block;

    } else if (!prev_alloc && get_alloc(next)) {
        delete_block(prev);
        write_block(prev, get_size(prev) + get_size(block), false);
        dbg_printf("Successfully write in prev is free. %p\n", block);
        block = prev;
    } else if (!get_alloc(next) && prev_alloc) {
        delete_block(next);
        write_block(block, get_size(next) + get_size(block), false);
        dbg_printf("Successfully write in next is free. %p\n", block);
    } else {
        delete_block(prev);
        delete_block(next);
        write_block(prev, get_size(prev) + get_size(block) + get_size(next),
                    false);
        dbg_printf("Successfully write in both is free. %p\n", block);
        block = prev;
    }
    return block;

    // if (!prev_is_null && get_alloc(prev) && get_alloc(next) && !next_is_null)
    // {
    //     return block;
    // } else if (!get_alloc(prev) && get_alloc(next)) {
    //     write_block(prev, get_size(prev) + get_size(block), false);
    //     block = prev;
    // } else if (!get_alloc(next) && get_alloc(prev)) {
    //     write_block(block, get_size(next) + get_size(block), false);
    // } else {
    //     write_block(prev, get_size(prev) + get_size(block) + get_size(next),
    //                 false);
    //     block = prev;
    // }
}

/**
 * @brief
 *
 * This function is used to extend the heap when there is no suitable free block
 * in the free list
 * @param[in] size The size that we need to extend
 * @return The address of the first free block after entend
 */
static block_t *extend_heap(size_t size) {
    dbg_printf("extend_heap begins\n");
    void *bp;

    // Allocate an even number of words to maintain alignment
    size = round_up(size, dsize);
    if ((bp = mem_sbrk(size)) == (void *)-1) {
        return NULL;
    }

    /*
     * TODO: delete or replace this comment once you've thought about it.
     * Think about what bp represents. Why do we write the new block
     * starting one word BEFORE bp, but with the same size that we
     * originally requested?
     */

    // Initialize free block header/footer
    block_t *block = payload_to_header(bp);

    size_t next_alloc_bit = get_prev_alloc(find_next(block));
    dbg_printf("next alloc bit is %ld\n", next_alloc_bit);

    write_block(block, size, false);
    dbg_printf("Successfully write in extend_heap. %p, %ld\n", block, size);

    // Create new epilogue header
    block_t *block_next = find_next(block);
    write_epilogue(block_next);
    dbg_printf("Successfully write epilog. %p, %ld\n", block_next,
               get_size(block_next));

    // Coalesce in case the previous block was free
    block = coalesce_block(block);
    insert_block(block);

    dbg_printf("extend_heap ends\n");
    return block;
}

/**
 * @brief
 * this function is used to split the block when malloc. If the free block's
 * size is larger than the required block plus the minimum size, then we can
 * split the block
 *
 * @param[in] block The pointer to the block that needed to be split.
 * @param[in] asize The size of allocated size.
 */
static void split_block(block_t *block, size_t asize) {

    dbg_requires(get_alloc(block));
    /* TODO: Can you write a precondition about the value of asize? */

    size_t block_size = get_size(block);
    dbg_printf("we are going to split block with size %ld", block_size);
    if ((block_size - asize) >= min_block_size) {
        block_t *block_next;
        write_block(block, asize, true);
        dbg_printf("Successfully write in split_block 553. %p, %ld\n", block,
                   asize);

        block_next = find_next(block);
        write_block(block_next, block_size - asize, false);
        dbg_printf("Successfully write in split_block 557. %p, %ld\n", block,
                   block_size - asize);

        insert_block(block_next);
        dbg_printf(
            "We insert a block in line 582 with split_function size %ld\n",
            block_size - asize);
    }

    dbg_ensures(get_alloc(block));
}

/**
 * @brief this is first fit function. We use this function to find the first fit
 * free block when allocated in the segregated list. When the first free list
 * doesn't have a suitable block, when will go through the next whole segregated
 * list until we find one.
 *
 * @param[in] asize The size we need to find
 * @return the pointer to the free block
 */
// static block_t *find_fit(size_t asize) {
//     dbg_printf("Try to find a fit for size %ld\n", asize);
//     block_t *block = NULL;
//     block_t *temp = NULL;
//     print_free_list();

//     size_t index = get_index(asize);

//     for (block = seg_free_list[index]; block != NULL && get_size(block) > 0;
//          block = block->next) {

//         if (!(get_alloc(block)) && (asize <= get_size(block))) {
//             temp = block;
//             for (int i = 0; i < 10; i++)
//             {

//                 if (block != NULL) {
//                     block = block->next;
//                     if (get_size(block) < get_size(temp)) {
//                     temp = block;
//                     }
//                 }

//             }
//                 return temp;
//         }
//         dbg_printf("Unable to find a fit for block %p, %ld and try next block
//         "
//                    "in the list\n",
//                    block, get_size(block));
//     }
//     dbg_printf("No fit found\n");
//     size_t j = index + 1;
//     while (j < 9) {
//         for (block = seg_free_list[j]; block != NULL && get_size(block) > 0;
//              block = block->next) {

//             if (!(get_alloc(block)) && (asize <= get_size(block))) {
//                 temp = block;
//                 for (int i = 0; i < 10; i++)
//                 {
//                      dbg_printf("In the loop\n");

//                     if (block != NULL) {
//                         block = block->next;
//                         if (get_size(block) < get_size(temp)) {
//                         temp = block;
//                         }
//                     }
//                 }
//                     return temp;
//             }
//             dbg_printf("Unable to find a fit for block %p, %ld and try next "
//                        "block in the list\n",
//                        block, get_size(block));
//         }
//         j++;
//     }
//     return NULL; // no fit found
// }
static block_t *find_fit(size_t asize) {
    dbg_printf("Try to find a fit for size %ld\n", asize);
    block_t *block = NULL;

    print_free_list();

    size_t index = get_index(asize);

    for (block = seg_free_list[index]; block != NULL && get_size(block) > 0;
         block = block->next) {

        if (!(get_alloc(block)) && (asize <= get_size(block))) {
            return block;
        }
        // dbg_printf("Unable to find a fit for block %p, %ld and try next block
        // "
        //            "in the list\n",
        //            block, get_size(block));
    }
    dbg_printf("No fit found\n");
    size_t j = index + 1;
    while (j < 9) {
        for (block = seg_free_list[j]; block != NULL && get_size(block) > 0;
             block = block->next) {

            if (!(get_alloc(block)) && (asize <= get_size(block))) {
                return block;
            }
            // dbg_printf("Unable to find a fit for block %p, %ld and try next "
            //            "block in the list\n",
            //            block, get_size(block));
        }
        j++;
    }
    return NULL; // no fit found
}

/**
 * @brief
 *
 * This function is used to check whether the heap is running in good trace.
 *
 * @param[in] line the line that we need to check
 * @return Whether there is a bug in the heap or not.
 */
bool mm_checkheap(int line) {
    // if (!print_free_list()) {
    //     return false;
    // }
    // if (!print_heap()) {
    //     return false;
    // }

    return true;
}

/**
 * @brief
 *
 * this function is to init the heap when the first malloc and the heap is
 * empty.
 *
 * @return whether init successfully
 */
bool mm_init(void) {
    dbg_printf("mm_init begins\n");
    // Create the initial empty heap
    word_t *start = (word_t *)(mem_sbrk(2 * wsize));

    if (start == (void *)-1) {
        return false;
    }

    /*
     * TODO: delete or replace this comment once you've thought about it.
     * Think about why we need a heap prologue and epilogue. Why do
     * they correspond to a block footer and header respectively?
     */

    start[0] = pack(0, true, false); // Heap prologue (block footer)
    dbg_printf("prologue is %ld\n", start[0]);
    start[1] = pack(0, true, true); // Heap epilogue (block header)

    for (int i = 0; i < 9; i++) {
        seg_free_list[i] = NULL;
    }

    // Heap starts with first "block header", currently the epilogue
    heap_start = (block_t *)&(start[1]);
    free_list = NULL;
    // Extend the empty heap with a free block of chunksize bytes
    if (extend_heap(chunksize) == NULL) {
        return false;
    }

    dbg_printf("mm_init ends\n");
    return true;
}

/**
 * @brief
 *
 * this function is to allocated a suitable heap place and return the address of
 * the free block to the user. We will change the status of the free block to
 * allocated and do the split block tasks.
 *
 * @param[in] size the size we need to allocated
 * @return the pointer the the address of the allocated block's payload.
 */
void *malloc(size_t size) {

    dbg_printf("malloc begins with size "
               "%ld\n-----------------------------------------",
               size);
    // dbg_requires(mm_checkheap(__LINE__));

    size_t asize;      // Adjusted block size
    size_t extendsize; // Amount to extend heap if no fit is found
    block_t *block;
    void *bp = NULL;

    // Initialize heap if it isn't initialized
    if (heap_start == NULL) {
        mm_init();
    }

    // Ignore spurious request
    if (size == 0) {
        dbg_ensures(mm_checkheap(__LINE__));
        return bp;
    }

    // Adjust block size to include overhead and to meet alignment requirements
    asize = round_up(size + wsize, dsize);
    if (asize < min_block_size) {
        asize = min_block_size;
    }
    dbg_printf("We do a round_up here %ld\n", asize);
    // Search the free list for a fit
    block = find_fit(asize);
    dbg_printf("We do a find_fit here %ld\n", asize);

    // If no fit is found, request more memory, and then and place the block
    if (block == NULL) {
        // Always request at least chunksize
        extendsize = max(asize, chunksize);
        dbg_printf("Here I calls the extend_heap again\n");
        block = extend_heap(extendsize);
        // extend_heap returns an error
        if (block == NULL) {
            return bp;
        }
    }

    // The block should be marked as free
    dbg_assert(!get_alloc(block));

    // Mark block as allocated
    size_t block_size = get_size(block);
    write_block(block, block_size, true);

    dbg_printf("We try to delete a block in malloc LINE 968 with previous "
               "block is %p\n",
               block->prev);
    delete_block(block);
    dbg_printf("We do a delete_block here %ld\n", block_size);
    // Try to split the block if too large
    split_block(block, asize);
    dbg_printf("We do a split_block here %ld\n", block_size);

    bp = header_to_payload(block);

    dbg_ensures(mm_checkheap(__LINE__));
    dbg_printf("malloc ends\n");
    print_free_list();
    return bp;
}

/**
 * @brief
 *
 * This is the free function to free an allocated block.
 *
 * @param[in] bp The address to the payload that needed to freed
 */
void free(void *bp) {
    dbg_printf("free begins\n");
    dbg_requires(mm_checkheap(__LINE__));

    if (bp == NULL) {
        return;
    }

    block_t *block = payload_to_header(bp);
    size_t size = get_size(block);

    // The block should be marked as allocated
    dbg_assert(get_alloc(block));

    // Mark the block as free
    write_block(block, size, false);
    dbg_printf("Successfully write in free 751. %p, %ld\n", block, size);

    // Try to coalesce the block with its neighbors
    dbg_printf(
        "When free a block, the next block is %p, previous block is %p\n",
        block->next, block->prev);
    block = coalesce_block(block);
    insert_block(block);
    dbg_printf(
        "When free a block, the next block is %p, previous block is %p\n",
        block->next, block->prev);

    dbg_printf("free ends\n");
    dbg_ensures(mm_checkheap(__LINE__));
}

/**
 * @brief
 *
 * this function is the combine of the malloc and free
 *
 * @param[in] ptr the pointer to an allocated block
 * @param[in] size The size we need to malloc. If it is zero, we need to free
 * the block
 * @return
 */
void *realloc(void *ptr, size_t size) {
    block_t *block = payload_to_header(ptr);
    size_t copysize;
    void *newptr;

    // If size == 0, then free block and return NULL
    if (size == 0) {
        free(ptr);
        return NULL;
    }

    // If ptr is NULL, then equivalent to malloc
    if (ptr == NULL) {
        return malloc(size);
    }

    // Otherwise, proceed with reallocation
    newptr = malloc(size);

    // If malloc fails, the original block is left untouched
    if (newptr == NULL) {
        return NULL;
    }

    // Copy the old data
    copysize = get_payload_size(block); // gets size of old payload
    if (size < copysize) {
        copysize = size;
    }
    memcpy(newptr, ptr, copysize);

    // Free the old block
    free(ptr);

    return newptr;
}

/**
 * @brief
 *
 * this is the calloc function to initilized all the bits to zero
 *
 * @param[in] elements numbers of block
 * @param[in] size size of block
 * @return
 */
void *calloc(size_t elements, size_t size) {
    void *bp;
    size_t asize = elements * size;

    if (elements == 0) {
        return NULL;
    }
    if (asize / elements != size) {
        // Multiplication overflowed
        return NULL;
    }

    bp = malloc(asize);
    if (bp == NULL) {
        return NULL;
    }

    // Initialize all bits to 0
    memset(bp, 0, asize);

    return bp;
}

/*
 *****************************************************************************
 * Do not delete the following super-secret(tm) lines!                       *
 *                                                                           *
 * 53 6f 20 79 6f 75 27 72 65 20 74 72 79 69 6e 67 20 74 6f 20               *
 *                                                                           *
 * 66 69 67 75 72 65 20 6f 75 74 20 77 68 61 74 20 74 68 65 20               *
 * 68 65 78 61 64 65 63 69 6d 61 6c 20 64 69 67 69 74 73 20 64               *
 * 6f 2e 2e 2e 20 68 61 68 61 68 61 21 20 41 53 43 49 49 20 69               *
 *                                                                           *
 * 73 6e 27 74 20 74 68 65 20 72 69 67 68 74 20 65 6e 63 6f 64               *
 * 69 6e 67 21 20 4e 69 63 65 20 74 72 79 2c 20 74 68 6f 75 67               *
 * 68 21 20 2d 44 72 2e 20 45 76 69 6c 0a c5 7c fc 80 6e 57 0a               *
 *                                                                           *
 *****************************************************************************
 */
